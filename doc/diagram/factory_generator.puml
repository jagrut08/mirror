@startuml

package "Metaobjects" as metaobjects #D0E0F0 {
	class meta::Type {
		+get_name() : string
	}

	class meta::Constructor {
		+get_parameters()
	}

	class meta::Parameter {
		+get_name() : string
	}
}

package "Product-related" #D0D0D0 {
	class product {
		+product()
		+product(...)
	}

	note right of product : We want to create\ninstances of this\ntype, from external\nrepresentation.

	class "External\nrepresentation" as external_representation << (X,orchid) >>{
	}

	note right of external_representation : XML,JSON,\nRDBS,GUI,\netc.
}

package "Factory builder framework" as framework #D0F0E0 {
	class factory_builder<Traits> {
		+name() : string
		+build<T>() : factory<T>
	}

	class factory<Traits, Product> {
		+product_type_name() : string
		+constructor_count() : integer
		+constructor(integer)
		+construct(context) : Product
	}

	class factory_constructor<Traits, Product> {
		+is_default_constructor() : boolean
		+is_move_constructor() : boolean
		+is_copy_constructor() : boolean
		+parameter_count() : interger
		+parameter(integer)
		+construct() : Product
	}

	class factory_parameter<Traits, T> {
		+type_name() : string
		+name() : string
		+get() : T
	}

	note left of factory_builder : Creates a reusable factory.

	note left of factory : Can be used\nto construct multiple\ninstances\nof the Product type.

	note left of factory_parameter : Gets a parameter\nfor a constructor.
}

class factory_traits {
}

note right of factory_traits : Determine how\nexternal representation\nis handled, converted\ninto C++ representation\nand used as input\nfor constructors.

package "Provided by factory traits" as units #F0F0E0 {
	class builder_unit {
	}

	class factory_unit<Product> {
		+select_constructor(context) : integer
	}

	class constructor_unit<Product> {
		+construct(context) : Product
	}

	class parameter_unit<T> {
		+get(context) : T
	}

	class atomic_unit<T> {
		+get(context) : T
	}

	class composite_unit<T> {
		-factory<T>: fac
		+get(context) : T
	}

	class copy_unit<T> {
		+get(context) : T
	}
}

class construction_context {
}
note right of construction_context : Provides access\nto an external\nrepresentation\nwhen constructing\nan instance\nof product type.

meta::Type o-- meta::Constructor : has
meta::Constructor o-- meta::Parameter : has
meta::Type --o meta::Parameter : has
meta::Type --> product : reflects

product <-- external_representation
note on link : Represents\nan instance\nof the product\ntype.

factory_builder *-- factory
factory_builder --> builder_unit
factory *-- factory_constructor
factory --> factory_unit
factory ..> product : instantiates
factory_constructor *-- factory_parameter
factory_constructor --> constructor_unit
factory_parameter --> parameter_unit

framework --> construction_context
construction_context <-- units

meta::Type <-- factory
meta::Constructor <-- factory_constructor
meta::Parameter <-- factory_parameter

factory_traits ..> units : provides
factory_traits ..> construction_context : provides

factory_traits <-- factory_builder : uses

builder_unit <-- factory_unit : parent
factory_unit <-- constructor_unit : parent

constructor_unit <-- parameter_unit : parent
factory --* composite_unit

parameter_unit <|-- atomic_unit
parameter_unit <|-- composite_unit
parameter_unit <|-- copy_unit

external_representation <-- construction_context

@enduml
